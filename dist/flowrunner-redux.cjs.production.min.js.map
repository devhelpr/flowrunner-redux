{"version":3,"file":"flowrunner-redux.cjs.production.min.js","sources":["../src/ReduxActionTask.ts","../src/ReduxArrayStateType.ts","../src/ReduxAssignArrayActionTask.ts","../src/ReduxSetItemByKeyArrayActionTask.ts","../src/ReduxPropertyStateType.ts","../src/ReduxClearArrayActionTask.ts","../src/ReduxGetKeyTask.ts","../src/ReduxGetTask.ts","../src/ReduxHashmapStateType.ts","../src/ReduxPushArrayActionTask.ts","../src/ReduxSetKeyActionTask.ts","../src/ReduxThunkActionTask.ts","../src/StoreObserverTask.ts","../src/FrontendFlowEventRunner.ts","../src/components/ReactComponentFlowConnector.tsx","../src/components/ReactComponentTriggerFlow.tsx"],"sourcesContent":["import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxActionTask extends FlowTask {\n  public execute(node: any, services: any) {\n    services.dispatch({\n      type: node.setVariable.replace(/ /g, '') + 'SetAction',\n      value: node.payload.value,\n    });\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxActionTask';\n  }\n\n  public getFullName() {\n    return 'ReduxAction';\n  }\n\n  public getDescription() {\n    return 'Node that performs a simple redux action';\n  }\n\n  public getIcon() {\n    return 'reduxaction';\n  }\n\n  public getShape() {\n    return 'circle';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'setVariable',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import * as FlowRunner from '@devhelpr/flowrunner';\n\nexport class ReduxArrayStateType extends FlowRunner.FlowTask {\n  public execute(node: any, _services: any) {\n    console.log('RUNNING ReduxArrayStateType: ' + node.id + ' - ' + node.name);\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxArrayStateType';\n  }\n\n  public getFullName() {\n    return 'ReduxArray';\n  }\n\n  public getReducer(node: any) {\n    const variableName = node.variableName.replace(/ /g, '');\n\n    const pushActionId = variableName + 'PushArrayAction';\n    const clearActionId = variableName + 'ClearArrayAction';\n    const assignActionId = variableName + 'AssignArrayAction';\n    const setItemByKeyActionId = variableName + 'SetItemByKeyAction';\n\n    return (state = [], action: any) => {\n      switch (action.type) {\n        case clearActionId: {\n          return [];\n        }\n        case assignActionId: {\n          return action.list;\n        }\n        case pushActionId: {\n          const newState: any = state.slice();\n          newState.push(action.value);\n          return newState;\n        }\n        case setItemByKeyActionId: {\n          let newState = state.map((item: any) => {\n            if (\n              item[node.idPropertyName] === action.payload[node.idPropertyName]\n            ) {\n              return { ...action.payload };\n            }\n            return { ...item };\n          });\n          return newState;\n        }\n        default:\n          return state;\n      }\n    };\n  }\n\n  public getIcon() {\n    return 'reduxarray';\n  }\n\n  public getShape() {\n    return 'rect';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowRunner.FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'variableName',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxAssignArrayActionTask extends FlowTask {\n  public execute(node: any, services: any) {\n    services.dispatch({\n      type: node.setVariable.replace(/ /g, '') + 'AssignArrayAction',\n      list: node.payload.list,\n    });\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxAssignArrayActionTask';\n  }\n\n  public getFullName() {\n    return 'ReduxAssignArrayAction';\n  }\n\n  public getIcon() {\n    return 'reduxassignarrayaction';\n  }\n\n  public getShape() {\n    return 'circle';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'setVariable',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxSetItemByKeyArrayActionTask extends FlowTask {\n  public execute(node: any, services: any) {\n    services.dispatch({\n      type: node.setVariable.replace(/ /g, '') + 'SetItemByKeyAction',\n      payload: node.payload,\n    });\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxSetItemByKeyArrayActionTask';\n  }\n\n  public getFullName() {\n    return 'ReduxSetItemByKeyArrayAction';\n  }\n\n  public getIcon() {\n    return 'reduxsetitembykeyarrayaction';\n  }\n\n  public getShape() {\n    return 'circle';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'setVariable',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\n//const REDUX_ASSIGN_SET_VALUE_ACTION = 'REDUX_ASSIGN_SET_VALUE_ACTION';\n\nexport class ReduxPropertyStateType extends FlowTask {\n  public execute(node: any, _services: any, _callStack: any) {\n    console.log(\n      'RUNNING ReduxPropertyStateType: ' + node.id + ' - ' + node.name\n    );\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxPropertyStateType';\n  }\n\n  public getFullName() {\n    return 'ReduxProperty';\n  }\n\n  public getReducer(node: any) {\n    const actionId = node.variableName.replace(/ /g, '') + 'SetAction';\n    return (state = '', action: any) => {\n      try {\n        switch (action.type) {\n          case actionId:\n            if (action.value !== undefined) {\n              return action.value;\n            } else {\n              return state;\n            }\n          default:\n            return state;\n        }\n      } catch (err) {\n        return state;\n      }\n    };\n  }\n\n  public getIcon() {\n    return 'reduxproperty';\n  }\n\n  public getShape() {\n    return 'rect';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      { name: 'value', defaultValue: '', valueType: 'string', required: false },\n      {\n        name: 'variableName',\n        defaultValue: '',\n        valueType: 'string',\n        required: false,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxClearArrayActionTask extends FlowTask {\n  public execute(node: any, services: any) {\n    services.dispatch({\n      type: node.setVariable.replace(/ /g, '') + 'ClearArrayAction',\n      value: node.payload.value,\n    });\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxClearArrayActionTask';\n  }\n\n  public getFullName() {\n    return 'ReduxClearArrayActionTask';\n  }\n\n  public getIcon() {\n    return 'reduxcleararrayaction';\n  }\n\n  public getShape() {\n    return 'circle';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'setVariable',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxGetKeyTask extends FlowTask {\n  public execute(node: any, services: any, _callStack: any): any {\n    return new Promise((resolve, reject) => {\n      if (\n        node.assignTo !== undefined &&\n        node.readKey !== undefined &&\n        node.assignTo !== '' &&\n        node.readKey !== ''\n      ) {\n        const reducerName = node.getVariable.replace(/ /g, '');\n        const store = services.getStore().getState();\n\n        const payload = Object.assign({}, node.payload, {\n          [node.assignTo]: store[reducerName][node.readKey],\n        });\n        resolve(payload);\n      } else {\n        reject();\n      }\n    });\n  }\n\n  public getName() {\n    return 'ReduxGetKeyTask';\n  }\n\n  public getFullName() {\n    return 'ReduxGetKey';\n  }\n\n  public getDescription() {\n    return 'Reducer name: {{{title}}} - get property: {{{readKey}}} set property {{{assignTo}}} in payload';\n  }\n\n  public getIcon() {\n    return 'reactgetkey';\n  }\n\n  public getShape() {\n    return 'circle';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'readKey',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n      {\n        name: 'assignTo',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n      {\n        name: 'getVariable',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxGetTask extends FlowTask {\n  public execute(node: any, services: any, _callStack: any) {\n    return new Promise((resolve, reject) => {\n      if (node.assignTo !== undefined && node.assignTo !== '') {\n        const reducerName = node.getVariable.replace(/ /g, '');\n\n        const store = services.getStore().getState();\n\n        const payload = Object.assign({}, node.payload, {\n          [node.assignTo]: store[reducerName],\n        });\n        resolve(payload);\n      } else {\n        reject();\n      }\n    });\n  }\n\n  public getName() {\n    return 'ReduxGetTask';\n  }\n\n  public getFullName() {\n    return 'ReduxGet';\n  }\n\n  public getDescription() {\n    return 'Get from store: Reducer name: {{{title}}} - and set property {{{assignTo}}} in payload';\n  }\n\n  public getIcon() {\n    return 'reactget';\n  }\n\n  public getShape() {\n    return 'rect';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'assignTo',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n      {\n        name: 'getVariable',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxHashmapStateType extends FlowTask {\n  public execute(node: any, _services: any) {\n    console.log(\n      'RUNNING ReduxHashmapStateType: ' + node.id + ' - ' + node.name\n    );\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxHashmapStateType';\n  }\n\n  public getFullName() {\n    return 'ReduxHashmap';\n  }\n\n  public getReducer(node: any) {\n    const setKeyActionId = node.variableName.replace(/ /g, '') + 'SetKeyAction';\n    return (state = {}, action: any) => {\n      switch (action.type) {\n        case setKeyActionId:\n          return Object.assign({}, state, { [action.key]: action.value });\n        default:\n          return state;\n      }\n    };\n  }\n\n  public getIcon() {\n    return 'reduxhashmap';\n  }\n\n  public getShape() {\n    return 'rect';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'variableName',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxPushArrayActionTask extends FlowTask {\n  public execute(node: any, services: any) {\n    services.dispatch({\n      type: node.setVariable.replace(/ /g, '') + 'PushArrayAction',\n      value: node.payload.value,\n    });\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxPushArrayActionTask';\n  }\n\n  public getFullName() {\n    return 'ReduxPushArrayAction';\n  }\n\n  public getIcon() {\n    return 'reduxpusharrayaction';\n  }\n\n  public getShape() {\n    return 'circle';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'setVariable',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxSetKeyActionTask extends FlowTask {\n  public execute(node: any, services: any) {\n    services.callStack.dispatch({\n      key: node.assignToKey,\n      type: node.setVariable.replace(/ /g, '') + 'SetKeyAction',\n      value: node.payload.value,\n    });\n\n    return true;\n  }\n\n  public getDescription() {\n    return \"Reducer name: {{{title}}} - set property: {{{assignToKey}}} using property 'value' from payload\";\n  }\n\n  public getName() {\n    return 'ReduxSetKeyActionTask';\n  }\n\n  public getFullName() {\n    return 'ReduxSetKeyAction';\n  }\n\n  public getIcon() {\n    return 'reduxsetkeyaction';\n  }\n\n  public getShape() {\n    return 'circle';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'assignToKey',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n      {\n        name: 'setVariable',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\n\nexport class ReduxThunkActionTask extends FlowTask {\n  public execute(node: any) {\n    console.log('RUNNING ReduxThunkActionTask: ' + node.id + ' - ' + node.name);\n\n    return true;\n  }\n\n  public getName() {\n    return 'ReduxThunkActionTask';\n  }\n\n  public getFullName() {\n    return 'ReduxThunkAction';\n  }\n\n  public getIcon() {\n    return 'reduxthunkaction';\n  }\n\n  public getShape() {\n    return 'circle';\n  }\n\n  public getTaskType() {\n    return 'frontend';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getAction(_actionName: string, _nodeInstance: any, nodeEmitter: any) {\n    return (nodeEvent: any, payload: any) => {\n      return (dispatch: any) => {\n        //console.log('reactthunkaction dispatched...ready to trigger events', nodeEvent);\n        nodeEvent.outputs.map((node: any) => {\n          nodeEmitter.emit(node.endshapeid.toString(), payload, dispatch);\n          return true;\n        });\n      };\n    };\n  }\n}\n","import { FlowTask, FlowTaskPackageType } from '@devhelpr/flowrunner';\nimport { Observable } from 'rxjs';\n\nvar isEqual = function(value: any, other: any) {\n  // Get the value type\n  var type = Object.prototype.toString.call(value);\n\n  // If the two objects are not the same type, return false\n  if (type !== Object.prototype.toString.call(other)) return false;\n\n  // If items are not an object or array, return false\n  if (['[object Array]', '[object Object]'].indexOf(type) < 0) return false;\n\n  // Compare the length of the length of the two items\n  var valueLen =\n    type === '[object Array]' ? value.length : Object.keys(value).length;\n  var otherLen =\n    type === '[object Array]' ? other.length : Object.keys(other).length;\n  if (valueLen !== otherLen) return false;\n\n  // Compare two items\n  var compare = function(item1: any, item2: any) {\n    // Get the object type\n    var itemType = Object.prototype.toString.call(item1);\n\n    // If an object or array, compare recursively\n    if (['[object Array]', '[object Object]'].indexOf(itemType) >= 0) {\n      if (!isEqual(item1, item2)) return false;\n    }\n\n    // Otherwise, do a simple comparison\n    else {\n      // If the two items are not the same type, return false\n      if (itemType !== Object.prototype.toString.call(item2)) return false;\n\n      // Else if it's a function, convert to a string and compare\n      // Otherwise, just compare\n      if (itemType === '[object Function]') {\n        if (item1.toString() !== item2.toString()) return false;\n      } else {\n        if (item1 !== item2) return false;\n      }\n    }\n    return true;\n  };\n\n  // Compare properties\n  if (type === '[object Array]') {\n    for (var i = 0; i < valueLen; i++) {\n      if (compare(value[i], other[i]) === false) return false;\n    }\n  } else {\n    for (var key in value) {\n      if (value.hasOwnProperty(key)) {\n        if (compare(value[key], other[key]) === false) return false;\n      }\n    }\n  }\n\n  // If nothing failed, return true\n  return true;\n};\n\nexport class StoreObserverTask extends FlowTask {\n  public execute(node: any, services: any) {\n    const observable = Observable.create((observer: any) => {\n      try {\n        if (node.propertyName !== undefined && node.propertyName !== '') {\n          const observableSubscription = services.getObservable('storechange');\n\n          if (\n            observableSubscription !== undefined &&\n            observableSubscription !== false\n          ) {\n            const observerSubscription = {\n              complete: () => {\n                console.log(\n                  'StoreObserverTask: Completed observable for ',\n                  node.name\n                );\n              },\n              error: (err: any) => {\n                observer.error(err);\n              },\n              next: (payload: any) => {\n                // payload:\n                // - nextState\n                // - prevState\n                if (\n                  node.propertyName !== undefined &&\n                  node.propertyName !== null &&\n                  node.propertyName !== ''\n                ) {\n                  if (\n                    !isEqual(\n                      payload.nextState[node.propertyName],\n                      payload.prevState[node.propertyName]\n                    )\n                  ) {\n                    observer.next(payload.nextState);\n                  }\n                }\n              },\n            };\n\n            observableSubscription.subscribe(observerSubscription);\n          } else {\n            observer.error(\n              'StoreObserverTask: Error - observable not found',\n              node.observe\n            );\n          }\n        } else {\n          observer.error('StoreObserverTask: Error - nothing to observe');\n        }\n      } catch (err) {\n        observer.error(err);\n      }\n    });\n\n    return observable;\n  }\n\n  public isAttachedToExternalObservable() {\n    return true;\n  }\n  public isAttachedToStoreChanges() {\n    return true;\n  }\n\n  public getDescription() {\n    return 'Node that observes store changes for {{{propertyName}}}';\n  }\n\n  public getName() {\n    return 'StoreObserverTask';\n  }\n\n  public getFullName() {\n    return 'StoreObserver';\n  }\n\n  public getIcon() {\n    return 'storeobserver';\n  }\n\n  public getShape() {\n    return 'smallcircle';\n  }\n\n  public getDefaultColor() {\n    return '#00ff80ff';\n  }\n\n  public getTaskType() {\n    return 'both';\n  }\n\n  public getPackageType() {\n    return FlowTaskPackageType.DEFAULT_NODE;\n  }\n\n  public getCategory() {\n    return 'FlowCanvas';\n  }\n\n  public getController() {\n    return 'FlowCanvasController';\n  }\n\n  public getConfigMetaData() {\n    return [\n      {\n        name: 'propertyName',\n        defaultValue: '',\n        valueType: 'string',\n        required: true,\n      },\n    ];\n  }\n}\n","import * as Redux from 'redux';\nimport { Subject } from 'rxjs';\nimport thunk from 'redux-thunk';\n\nimport { FlowEventRunner } from '@devhelpr/flowrunner';\nimport { ReduxActionTask } from './ReduxActionTask';\nimport { ReduxArrayStateType } from './ReduxArrayStateType';\nimport { ReduxAssignArrayActionTask } from './ReduxAssignArrayActionTask';\nimport { ReduxSetItemByKeyArrayActionTask } from './ReduxSetItemByKeyArrayActionTask';\nimport { ReduxPropertyStateType } from './ReduxPropertyStateType';\nimport { ReduxClearArrayActionTask } from './ReduxClearArrayActionTask';\nimport { ReduxGetKeyTask } from './ReduxGetKeyTask';\nimport { ReduxGetTask } from './ReduxGetTask';\nimport { ReduxHashmapStateType } from './ReduxHashmapStateType';\nimport { ReduxPushArrayActionTask } from './ReduxPushArrayActionTask';\nimport { ReduxSetKeyActionTask } from './ReduxSetKeyActionTask';\nimport { ReduxThunkActionTask } from './ReduxThunkActionTask';\nimport { StoreObserverTask } from './StoreObserverTask';\n\nlet actions: any = {};\nlet reducers: any = {};\nlet store: any = {};\nlet services: any = {};\nlet observers: any = {};\n\nexport interface IFrontendFlowRunner {\n  debug: boolean;\n  reduxMiddleware: any;\n  initialStoreState: any;\n}\n\nservices = {\n  logMessage: () => {},\n  pluginClasses: {},\n  registerModel: () => {},\n};\n\nservices.pluginClasses['ReduxActionTask'] = ReduxActionTask;\nservices.pluginClasses['ReduxArrayStateType'] = ReduxArrayStateType;\nservices.pluginClasses[\n  'ReduxAssignArrayActionTask'\n] = ReduxAssignArrayActionTask;\nservices.pluginClasses[\n  'ReduxSetItemByKeyArrayActionTask'\n] = ReduxSetItemByKeyArrayActionTask;\nservices.pluginClasses['ReduxPropertyStateType'] = ReduxPropertyStateType;\nservices.pluginClasses['ReduxClearArrayActionTask'] = ReduxClearArrayActionTask;\nservices.pluginClasses['ReduxGetKeyTask'] = ReduxGetKeyTask;\nservices.pluginClasses['ReduxGetTask'] = ReduxGetTask;\nservices.pluginClasses['ReduxHashmapStateType'] = ReduxHashmapStateType;\nservices.pluginClasses['ReduxPushArrayActionTask'] = ReduxPushArrayActionTask;\nservices.pluginClasses['ReduxSetKeyActionTask'] = ReduxSetKeyActionTask;\nservices.pluginClasses['ReduxThunkActionTask'] = ReduxThunkActionTask;\nservices.pluginClasses['StoreObserverTask'] = StoreObserverTask;\n\n// TODO : replace \"hook : any\" met interface\n\nlet flowEventRunner = new FlowEventRunner();\n\nflowEventRunner.registerFlowNodeOverrideAttachHook(\n  (node: any, task: any, eventEmitter: any, nodeEvent: any) => {\n    if (typeof task.getAction === 'function') {\n      //let nodeInstance = (<any>Object).assign({}, node);\n      const actionName = node.name.replace(/ /g, '');\n      actions[actionName] = {\n        action: task.getAction(actionName, node, eventEmitter),\n        nodeEvent: nodeEvent,\n      };\n    }\n  }\n);\n\nflowEventRunner.registerFlowNodeRegisterHook((node: any, task: any) => {\n  if (typeof task.getReducer === 'function') {\n    reducers[node.variableName.replace(/ /g, '')] = task.getReducer(node);\n    return true;\n  }\n  return false;\n});\n\nlet subjectStoreChange = new Subject();\nlet flowNotifierFactory = (_name: string) => {\n  return function(middlewareAPI: any) {\n    return function(next: any) {\n      return function(action: any) {\n        let prevState = middlewareAPI.getState();\n\n        var result = next(action);\n\n        let nextState = middlewareAPI.getState();\n\n        subjectStoreChange.next({ nextState: nextState, prevState: prevState });\n        return result;\n      };\n    };\n  };\n};\nobservers['storechange'] = subjectStoreChange;\n\nservices.getStore = () => {\n  return store;\n};\n\nfunction flowAction(actionName: string, payload: any) {\n  const action = actions[actionName.replace(/ /g, '')];\n\n  if (typeof action != 'undefined' && action != null) {\n    services.getStore().dispatch(action.action(action.nodeEvent, payload));\n  }\n}\n\nlet startFlow: any = (\n  flowPackage: any,\n  appReducers: any,\n  options: IFrontendFlowRunner\n) => {\n  if (options) {\n    if (options.debug) {\n      services.logMessage = (...args: any[]) => console.log(...args);\n    }\n  }\n  return flowEventRunner\n    .start(flowPackage, services, true)\n    .then((services: any) => {\n      const rootReducer = Redux.combineReducers(\n        Object.assign({}, reducers, appReducers)\n      );\n\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        typeof window !== 'undefined' &&\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ !== undefined\n      ) {\n        const composeEnhancers =\n          (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;\n        let enhancer;\n        if (options.reduxMiddleware) {\n          enhancer = composeEnhancers(\n            Redux.applyMiddleware(\n              thunk,\n              flowNotifierFactory('flownotifier'),\n              options.reduxMiddleware\n            )\n          );\n        } else {\n          enhancer = composeEnhancers(\n            Redux.applyMiddleware(thunk, flowNotifierFactory('flownotifier'))\n          );\n        }\n\n        store = Redux.createStore(\n          rootReducer,\n          options.initialStoreState,\n          enhancer\n        );\n      } else {\n        if (options.reduxMiddleware) {\n          store = Redux.createStore(\n            rootReducer,\n            options.initialStoreState,\n            Redux.applyMiddleware(\n              thunk,\n              flowNotifierFactory('flownotifier'),\n              options.reduxMiddleware\n            )\n          );\n        } else {\n          store = Redux.createStore(\n            rootReducer,\n            options.initialStoreState,\n            Redux.applyMiddleware(thunk, flowNotifierFactory('flownotifier'))\n          );\n        }\n      }\n\n      // TODO : dispatch gaat verhuizen van callStack naar services\n      //  ... het is immers ook een externe dependency\n      // .. dus aanpassen in de diverse tasks\n\n      services.dispatch = store.dispatch;\n\n      return services;\n    });\n};\n\nconst getFlowEventRunner: any = () => flowEventRunner;\n\nexport { startFlow, flowAction, getFlowEventRunner };\n","import * as React from 'react';\nimport { getFlowEventRunner } from '../FrontendFlowEventRunner';\nimport { Subtract } from 'utility-types';\n\nexport interface ReactComponentFlowConnectorProp {\n  payload: any;\n}\n\nexport interface ReactComponentFlowConnectorProps\n  extends ReactComponentFlowConnectorProp {\n  nodeName: string;\n}\n\nexport interface ReactComponentFlowConnectorState {\n  showWrappedComponent: boolean;\n  payload: any;\n  renderCounter: number;\n}\n\nexport const ReactComponentFlowConnector = <\n  P extends ReactComponentFlowConnectorProps\n>(\n  Component: React.ComponentType<P>\n) => {\n  return class extends React.Component<\n    Subtract<P, ReactComponentFlowConnectorProp>,\n    ReactComponentFlowConnectorState\n  > {\n    //constructor(props: any) {\n    //  super(props);\n    //}\n\n    state = {\n      showWrappedComponent: false,\n      payload: {},\n      renderCounter: 1,\n    };\n\n    renderCounter = 1;\n\n    componentDidMount() {\n      const observable = getFlowEventRunner().getObservableNode(\n        this.props.nodeName\n      );\n      if (observable) {\n        observable.subscribe({\n          next: (payload: any) => {\n            this.setState({\n              showWrappedComponent:\n                payload.showComponent !== undefined\n                  ? payload.showComponent\n                  : true,\n              payload: payload,\n              renderCounter: this.state.renderCounter + 1,\n            });\n          },\n        });\n      }\n    }\n\n    render() {\n      // TODO : hoe hier zorgen dat Component echt een nieuwe instantie is\n      //   bij wisselen van layout/form ? (payload veranderd dan)\n      //  ... is render prop hier een oplossing voor ? wellicht alleen intern\n      //   {getComponent()}\n      //   getComponent => () => {\n      //\t\treturn ...\n      //   };\n      const getComponent = () => {\n        return (\n          <Component {...(this.props as P)} payload={this.state.payload} />\n        );\n      };\n      if (\n        this.state.showWrappedComponent &&\n        this.renderCounter < this.state.renderCounter\n      ) {\n        this.renderCounter = this.state.renderCounter;\n        return <>{getComponent()}</>;\n      }\n      return <></>;\n    }\n  };\n};\n","import * as React from 'react';\nimport { getFlowEventRunner } from '../FrontendFlowEventRunner';\nimport { Subtract } from 'utility-types';\n\nexport interface ReactComponentTriggerFlowProp {\n  onTriggerFlow: (payload: any) => void;\n}\n\nexport interface ReactComponentTriggerFlowProps\n  extends ReactComponentTriggerFlowProp {\n  nodeName: string;\n  triggerProperty: string;\n}\n\nexport interface ReactComponentTriggerFlowState {}\n\nexport const ReactComponentTriggerFlow = <\n  P extends ReactComponentTriggerFlowProps\n>(\n  Component: React.ComponentType<P>\n) => {\n  return class extends React.Component<\n    Subtract<P, ReactComponentTriggerFlowProp>,\n    ReactComponentTriggerFlowState\n  > {\n    //constructor(props: any) {\n    //  super(props);\n    //}\n\n    state = {};\n\n    onTriggerFlow = (payload: any) => {\n      getFlowEventRunner().executeNode(this.props.nodeName, {\n        ...payload,\n        [this.props.triggerProperty]: true,\n      });\n    };\n\n    render() {\n      return (\n        <Component\n          {...(this.props as P)}\n          triggerProperty={this.props.triggerProperty}\n          nodeName={this.props.nodeName}\n          onTriggerFlow={this.onTriggerFlow}\n        />\n      );\n    }\n  };\n};\n"],"names":["ReduxActionTask","execute","node","services","dispatch","type","setVariable","replace","value","payload","getName","getFullName","getDescription","getIcon","getShape","getTaskType","getPackageType","FlowTaskPackageType","DEFAULT_NODE","getCategory","getController","getConfigMetaData","name","defaultValue","valueType","required","FlowTask","ReduxArrayStateType","_services","console","log","id","getReducer","variableName","pushActionId","clearActionId","assignActionId","setItemByKeyActionId","state","action","list","newState","slice","push","map","item","idPropertyName","FlowRunner","ReduxAssignArrayActionTask","ReduxSetItemByKeyArrayActionTask","ReduxPropertyStateType","_callStack","actionId","undefined","err","ReduxClearArrayActionTask","ReduxGetKeyTask","Promise","resolve","reject","assignTo","readKey","reducerName","getVariable","store","getStore","getState","Object","assign","ReduxGetTask","ReduxHashmapStateType","setKeyActionId","key","ReduxPushArrayActionTask","ReduxSetKeyActionTask","callStack","assignToKey","ReduxThunkActionTask","getAction","_actionName","_nodeInstance","nodeEmitter","nodeEvent","outputs","emit","endshapeid","toString","StoreObserverTask","Observable","create","observer","propertyName","observableSubscription","getObservable","subscribe","complete","error","next","isEqual","other","prototype","call","indexOf","valueLen","length","keys","compare","item1","item2","itemType","i","hasOwnProperty","nextState","prevState","observe","isAttachedToExternalObservable","isAttachedToStoreChanges","getDefaultColor","actions","reducers","logMessage","pluginClasses","registerModel","flowEventRunner","FlowEventRunner","registerFlowNodeOverrideAttachHook","task","eventEmitter","actionName","registerFlowNodeRegisterHook","subjectStoreChange","Subject","flowNotifierFactory","_name","middlewareAPI","result","getFlowEventRunner","Component","showWrappedComponent","renderCounter","componentDidMount","observable","getObservableNode","this","props","nodeName","_this2","setState","showComponent","render","React","executeNode","_this","triggerProperty","onTriggerFlow","flowPackage","appReducers","options","debug","start","then","rootReducer","Redux","initialStoreState","reduxMiddleware","thunk"],"mappings":"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"}